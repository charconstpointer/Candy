{"version":3,"sources":["components/Feed/Chat/ChatInstance.jsx","components/Feed/Chat/ChatFeed.jsx","components/Feed/Chat/EntryPanel/Entry.jsx","App.js","serviceWorker.js","index.js"],"names":["ChatInstance","Component","props","_useState","useState","_useState2","Object","slicedToArray","isConnected","setConnected","_useState3","_useState4","connection","setConnection","_useState5","body","_useState6","message","setMessage","_useState7","_useState8","messages","setMessages","messageInput","useRef","signalR","require","useEffect","chatrConnection","HubConnectionBuilder","withUrl","address","build","on","console","log","prevMessages","concat","toConsumableArray","name","start","then","invoke","catch","err","error","react_default","a","createElement","className","class","map","key","Math","random","ref","onChange","e","target","value","onClick","length","objectSpread","current","EntryPanel_Entry","_React$useState","React","_React$useState2","setName","_React$useState3","_React$useState4","setAddress","_React$useState5","_React$useState6","isLogged","setLogged","placeholder","type","App","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"2TAGeA,GCDuBC,YDCvB,SAAAC,GAAS,IAAAC,EACcC,oBAAS,GADvBC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACfK,EADeH,EAAA,GACFI,EADEJ,EAAA,GAAAK,EAEcN,mBAAS,IAFvBO,EAAAL,OAAAC,EAAA,EAAAD,CAAAI,EAAA,GAEfE,EAFeD,EAAA,GAEHE,EAFGF,EAAA,GAAAG,EAGQV,mBAAS,CAAEW,KAAM,KAHzBC,EAAAV,OAAAC,EAAA,EAAAD,CAAAQ,EAAA,GAGfG,EAHeD,EAAA,GAGNE,EAHMF,EAAA,GAAAG,EAIUf,mBAAS,IAJnBgB,EAAAd,OAAAC,EAAA,EAAAD,CAAAa,EAAA,GAIfE,EAJeD,EAAA,GAILE,EAJKF,EAAA,GAKhBG,EAAeC,mBACfC,EAAUC,EAAQ,IAExBC,oBAAU,WACR,IAAIC,GAAkB,IAAIH,EAAQI,sBAC/BC,QAAQ5B,EAAM6B,SACdC,QACHJ,EAAgBK,GAAG,iBAAkB,SAAAhB,GACnCiB,QAAQC,IAAI,OAAQlB,GAEpBK,EAAY,SAAAc,GAAY,SAAAC,OAAA/B,OAAAgC,EAAA,EAAAhC,CACnB8B,GADmB,CAEtB,CACEG,KAAMtB,EAAQsB,KACdxB,KAAME,EAAQF,YAIpBa,EACGY,QACAC,KAAK,WACJhC,GAAa,GACbmB,EAAgBc,OAAO,WAAYxC,EAAMqC,KAAM,aAEhDI,MAAM,SAAAC,GAAG,OAAIV,QAAQW,MAAMD,KAC9B/B,EAAce,IACb,IAcH,OAAIpB,EAEAsC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACbH,EAAAC,EAAAC,cAAA,MAAIE,MAAM,cACP7B,EAAS8B,IAAI,SAAAlC,GACZ,OACE6B,EAAAC,EAAAC,cAAA,MAAII,IAAKC,KAAKC,SAAUJ,MAAM,mBAC3BjC,EAAQsB,KADX,MACoBtB,EAAQF,SAMlC+B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,SAAOO,IAAKhC,EAAciC,SAlBR,SAAAC,GACxBvC,EAAW,CAAEqB,KAAMrC,EAAMqC,KAAMxB,KAAM0C,EAAEC,OAAOC,WAkBxCb,EAAAC,EAAAC,cAAA,KAAGY,QA3BS,WACU,IAAxB3C,EAAQF,KAAK8C,SACfjD,EAAW8B,OAAO,cAAezB,GACjCC,EAAWZ,OAAAwD,EAAA,EAAAxD,CAAA,GAAKW,EAAN,CAAeF,KAAM,MAC/BQ,EAAawC,QAAQJ,MAAQ,KAuBAT,MAAM,gCAA/B,UAOCJ,EAAAC,EAAAC,cAAA,6BEjEIgB,EAAA,SAAA9D,GAAS,IAAA+D,EACEC,IAAM9D,WADR+D,EAAA7D,OAAAC,EAAA,EAAAD,CAAA2D,EAAA,GACf1B,EADe4B,EAAA,GACTC,EADSD,EAAA,GAAAE,EAEQH,IAAM9D,WAFdkE,EAAAhE,OAAAC,EAAA,EAAAD,CAAA+D,EAAA,GAEftC,EAFeuC,EAAA,GAENC,EAFMD,EAAA,GAAAE,EAGQN,IAAM9D,UAAS,GAHvBqE,EAAAnE,OAAAC,EAAA,EAAAD,CAAAkE,EAAA,GAGfE,EAHeD,EAAA,GAGLE,EAHKF,EAAA,GAiBtB,OAAKC,EA0BD5B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAChD,EAAD,CAAcuC,KAAMA,EAAMR,QAASA,KAzBrCe,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACbH,EAAAC,EAAAC,cAAA,SACE4B,YAAY,YACZpB,SAjBkB,SAAAC,GACxBW,EAAQX,EAAEC,OAAOC,QAiBXV,UAAU,YACV4B,KAAK,SAEP/B,EAAAC,EAAAC,cAAA,SACE4B,YAAY,iBACZpB,SAnBqB,SAAAC,GAC3Bc,EAAWd,EAAEC,OAAOC,QAmBdV,UAAU,eACV4B,KAAK,SAGP/B,EAAAC,EAAAC,cAAA,KACEY,QArBuB,WAC7Be,GAAU,IAqBJzB,MAAM,gCAFR,aCxBO4B,mLARX,OACEhC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACgB,EAAD,cAJU/D,aCQE8E,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOvC,EAAAC,EAAAC,cAACsC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMlD,KAAK,SAAAmD,GACjCA,EAAaC","file":"static/js/main.d4f25e66.chunk.js","sourcesContent":["import React, { useEffect, useState, useRef } from \"react\";\r\nimport \"./ChatFeed\";\r\n\r\nexport default props => {\r\n  const [isConnected, setConnected] = useState(false);\r\n  const [connection, setConnection] = useState({});\r\n  const [message, setMessage] = useState({ body: \"\" });\r\n  const [messages, setMessages] = useState([]);\r\n  const messageInput = useRef();\r\n  const signalR = require(\"@aspnet/signalr\");\r\n\r\n  useEffect(() => {\r\n    let chatrConnection = new signalR.HubConnectionBuilder()\r\n      .withUrl(props.address)\r\n      .build();\r\n    chatrConnection.on(\"receiveMessage\", message => {\r\n      console.log(\"mess\", message);\r\n\r\n      setMessages(prevMessages => [\r\n        ...prevMessages,\r\n        {\r\n          name: message.name,\r\n          body: message.body\r\n        }\r\n      ]);\r\n    });\r\n    chatrConnection\r\n      .start()\r\n      .then(() => {\r\n        setConnected(true);\r\n        chatrConnection.invoke(\"joinRoom\", props.name, \"default\");\r\n      })\r\n      .catch(err => console.error(err));\r\n    setConnection(chatrConnection);\r\n  }, {});\r\n\r\n  const sendMessage = () => {\r\n    if (message.body.length !== 0) {\r\n      connection.invoke(\"sendmessage\", message);\r\n      setMessage({ ...message, body: \"\" });\r\n      messageInput.current.value = \"\";\r\n    }\r\n  };\r\n\r\n  const setCurrentMessage = e => {\r\n    setMessage({ name: props.name, body: e.target.value });\r\n  };\r\n\r\n  if (isConnected) {\r\n    return (\r\n      <div className=\"chatFeed\">\r\n        <ul class=\"collection\">\r\n          {messages.map(message => {\r\n            return (\r\n              <li key={Math.random()} class=\"collection-item\">\r\n                {message.name} : {message.body}\r\n              </li>\r\n            );\r\n          })}\r\n        </ul>\r\n\r\n        <div className=\"chatInput\">\r\n          <input ref={messageInput} onChange={setCurrentMessage} />\r\n          <a onClick={sendMessage} class=\"waves-effect waves-light btn\">\r\n            Send\r\n          </a>\r\n        </div>\r\n      </div>\r\n    );\r\n  } else {\r\n    return <h3>Connecting...</h3>;\r\n  }\r\n};\r\n","import React, { Component } from \"react\";\r\n\r\nexport default class ChatFeed extends Component {\r\n  state = {\r\n    messages: [],\r\n    rooms: []\r\n  };\r\n  componentDidMount = () => {\r\n    this.signalR = require(\"@aspnet/signalr\");\r\n    this.connection = new this.signalR.HubConnectionBuilder()\r\n      .withUrl(this.props.address)\r\n      .build();\r\n    this.connection.on(\"receiveMessage\", message => {\r\n      this.setState(prevState => ({\r\n        messages: [...prevState.messages, message]\r\n      }));\r\n    });\r\n    this.connection\r\n      .start()\r\n      .then(() => {\r\n        let roomName = \"default\";\r\n        this.connection.invoke(\"joinroom\", this.state.nick, roomName);\r\n        this.setState(prev => ({\r\n          connected: true,\r\n          rooms: [...prev.rooms, roomName]\r\n        }));\r\n      })\r\n      .catch(err => console.error(err));\r\n  };\r\n\r\n  onConnect = nick => {\r\n    this.setState(prevState => ({\r\n      ...prevState,\r\n      nick: nick\r\n    }));\r\n  };\r\n  render() {\r\n    if (!this.state.connected) {\r\n      return <h3>connecting...</h3>;\r\n    } else {\r\n      return (\r\n        <div>\r\n          {this.state.messages.map(message => {\r\n            return <h3 key={Math.random()}>{message}</h3>;\r\n          })}\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport \"./Entry.css\";\r\n// import ChatFeed from \"../Feed/Chat/ChatFeed\";\r\nimport ChatInstance from \"../ChatInstance\";\r\n\r\nexport default props => {\r\n  const [name, setName] = React.useState();\r\n  const [address, setAddress] = React.useState();\r\n  const [isLogged, setLogged] = React.useState(false);\r\n\r\n  const nameChangeHandler = e => {\r\n    setName(e.target.value);\r\n  };\r\n\r\n  const addressChangeHandler = e => {\r\n    setAddress(e.target.value);\r\n  };\r\n\r\n  const connectToServerHandler = () => {\r\n    setLogged(true);\r\n  };\r\n\r\n  if (!isLogged) {\r\n    return (\r\n      <div className=\"login\">\r\n        <input\r\n          placeholder=\"Your name\"\r\n          onChange={nameChangeHandler}\r\n          className=\"nameInput\"\r\n          type=\"text\"\r\n        />\r\n        <input\r\n          placeholder=\"Server address\"\r\n          onChange={addressChangeHandler}\r\n          className=\"addressInput\"\r\n          type=\"text\"\r\n        />\r\n\r\n        <a\r\n          onClick={connectToServerHandler}\r\n          class=\"waves-effect waves-light btn\"\r\n        >\r\n          Connect\r\n        </a>\r\n      </div>\r\n    );\r\n  } else {\r\n    return (\r\n      <div className=\"container\">\r\n        <ChatInstance name={name} address={address} />\r\n      </div>\r\n    );\r\n  }\r\n};\r\n","import React, { Component } from \"react\";\r\nimport \"./App.css\";\r\nimport Chat from \"./components/Feed/Chat/EntryPanel/Entry\";\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <Chat />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}